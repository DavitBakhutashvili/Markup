{"ast":null,"code":"import axios from 'axios';\nimport { login, refreshTokens, sendTextToServer } from '../services/useApiServices';\nclass MyClass {\n  constructor() {\n    this.start = async () => {\n      // Login and get the initial tokens\n      await this.login();\n      while (this.currentPos < this.text.length) {\n        const endPos = this.calculateEndPos();\n        const sentence = this.text.substring(this.currentPos, endPos);\n        this.currentPos = endPos;\n\n        // send sentence to the server\n        const result = await this.sendTextToServer(sentence);\n\n        // check if the onresult function exists and call it\n        if (typeof this.onresult === 'function') {\n          this.onresult(result);\n        }\n      }\n    };\n    //   login = async () => {\n    //     const response = await axios.post(\n    //       'https://enagramm.com/API/Account/Login',\n    //       {\n    //         Email: 'levan.lashauri1@gmail.com',\n    //         Password: 'Demo_1234',\n    //       }\n    //     );\n    //     this.token = response.data.AccessToken;\n    //     this.refreshToken = response.data.RefreshToken;\n    //   };\n    //   refreshTokens = async () => {\n    //     const response = await axios.post(\n    //       'https://enagramm.com/API/Account/RefreshToken',\n    //       {\n    //         AccessToken: this.token,\n    //         RefreshToken: this.refreshToken,\n    //       }\n    //     );\n    //     this.token = response.data.AccessToken;\n    //     this.refreshToken = response.data.RefreshToken;\n    //   };\n    this.calculateEndPos = () => {\n      const endPosLimit = Math.min(this.currentPos + 230, this.text.length);\n      for (let i = this.currentPos + 150; i <= endPosLimit; i++) {\n        if (['.', '!', '?', ';', ','].includes(this.text[i])) {\n          return i + 1;\n        }\n      }\n      return endPosLimit;\n    };\n    this.text = '';\n    this.onresult = null;\n    this.currentPos = 0;\n    this.token = '';\n    this.refreshToken = '';\n    // Override the login function with the imported one\n    this.login = login;\n    // Override the refreshTokens function with the imported one\n    this.refreshTokens = refreshTokens;\n    // Override the sendTextToServer function with the imported one\n    this.sendTextToServer = sendTextToServer;\n  }\n\n  //   sendTextToServer = async (sentence) => {\n  //     const model = {\n  //       Language: 'ka',\n  //       Text: sentence,\n  //       Voice: 0,\n  //       iterationCount: 2,\n  //     };\n\n  //     try {\n  //       const response = await axios({\n  //         method: 'post',\n  //         url: 'https://enagramm.com/API/TTS/SynthesizeTextAudioPath',\n  //         data: JSON.stringify(model),\n  //         headers: {\n  //           Authorization: `Bearer ${this.token}`,\n  //           'Content-Type': 'application/json; charset=utf-8',\n  //         },\n  //       });\n  //       console.log('responsedata', response.data.AudioFilePath);\n  //       return response.data;\n  //     } catch (error) {\n  //       if (error.response && error.response.status === 401) {\n  //         // Refresh tokens and retry\n  //         await this.refreshTokens();\n  //         return this.sendTextToServer(sentence);\n  //       } else {\n  //         throw error;\n  //       }\n  //     }\n  //   };\n}\n\nexport default MyClass;","map":{"version":3,"names":["axios","login","refreshTokens","sendTextToServer","MyClass","constructor","start","currentPos","text","length","endPos","calculateEndPos","sentence","substring","result","onresult","endPosLimit","Math","min","i","includes","token","refreshToken"],"sources":["/Users/davitBakhutashvili/MyProjects/Markup/markup-app/src/helpers/myClass.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  login,\n  refreshTokens,\n  sendTextToServer,\n} from '../services/useApiServices';\n\nclass MyClass {\n  constructor() {\n    this.text = '';\n    this.onresult = null;\n    this.currentPos = 0;\n    this.token = '';\n    this.refreshToken = '';\n    // Override the login function with the imported one\n    this.login = login;\n    // Override the refreshTokens function with the imported one\n    this.refreshTokens = refreshTokens;\n    // Override the sendTextToServer function with the imported one\n    this.sendTextToServer = sendTextToServer;\n  }\n\n  start = async () => {\n    // Login and get the initial tokens\n    await this.login();\n\n    while (this.currentPos < this.text.length) {\n      const endPos = this.calculateEndPos();\n      const sentence = this.text.substring(this.currentPos, endPos);\n      this.currentPos = endPos;\n\n      // send sentence to the server\n      const result = await this.sendTextToServer(sentence);\n\n      // check if the onresult function exists and call it\n      if (typeof this.onresult === 'function') {\n        this.onresult(result);\n      }\n    }\n  };\n\n  //   login = async () => {\n  //     const response = await axios.post(\n  //       'https://enagramm.com/API/Account/Login',\n  //       {\n  //         Email: 'levan.lashauri1@gmail.com',\n  //         Password: 'Demo_1234',\n  //       }\n  //     );\n\n  //     this.token = response.data.AccessToken;\n\n  //     this.refreshToken = response.data.RefreshToken;\n  //   };\n\n  //   refreshTokens = async () => {\n  //     const response = await axios.post(\n  //       'https://enagramm.com/API/Account/RefreshToken',\n  //       {\n  //         AccessToken: this.token,\n  //         RefreshToken: this.refreshToken,\n  //       }\n  //     );\n\n  //     this.token = response.data.AccessToken;\n  //     this.refreshToken = response.data.RefreshToken;\n  //   };\n\n  calculateEndPos = () => {\n    const endPosLimit = Math.min(this.currentPos + 230, this.text.length);\n    for (let i = this.currentPos + 150; i <= endPosLimit; i++) {\n      if (['.', '!', '?', ';', ','].includes(this.text[i])) {\n        return i + 1;\n      }\n    }\n    return endPosLimit;\n  };\n\n  //   sendTextToServer = async (sentence) => {\n  //     const model = {\n  //       Language: 'ka',\n  //       Text: sentence,\n  //       Voice: 0,\n  //       iterationCount: 2,\n  //     };\n\n  //     try {\n  //       const response = await axios({\n  //         method: 'post',\n  //         url: 'https://enagramm.com/API/TTS/SynthesizeTextAudioPath',\n  //         data: JSON.stringify(model),\n  //         headers: {\n  //           Authorization: `Bearer ${this.token}`,\n  //           'Content-Type': 'application/json; charset=utf-8',\n  //         },\n  //       });\n  //       console.log('responsedata', response.data.AudioFilePath);\n  //       return response.data;\n  //     } catch (error) {\n  //       if (error.response && error.response.status === 401) {\n  //         // Refresh tokens and retry\n  //         await this.refreshTokens();\n  //         return this.sendTextToServer(sentence);\n  //       } else {\n  //         throw error;\n  //       }\n  //     }\n  //   };\n}\n\nexport default MyClass;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,KAAK,EACLC,aAAa,EACbC,gBAAgB,QACX,4BAA4B;AAEnC,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAA,EAAG;IAAA,KAcdC,KAAK,GAAG,YAAY;MAClB;MACA,MAAM,IAAI,CAACL,KAAK,CAAC,CAAC;MAElB,OAAO,IAAI,CAACM,UAAU,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM,EAAE;QACzC,MAAMC,MAAM,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;QACrC,MAAMC,QAAQ,GAAG,IAAI,CAACJ,IAAI,CAACK,SAAS,CAAC,IAAI,CAACN,UAAU,EAAEG,MAAM,CAAC;QAC7D,IAAI,CAACH,UAAU,GAAGG,MAAM;;QAExB;QACA,MAAMI,MAAM,GAAG,MAAM,IAAI,CAACX,gBAAgB,CAACS,QAAQ,CAAC;;QAEpD;QACA,IAAI,OAAO,IAAI,CAACG,QAAQ,KAAK,UAAU,EAAE;UACvC,IAAI,CAACA,QAAQ,CAACD,MAAM,CAAC;QACvB;MACF;IACF,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAAA,KAEAH,eAAe,GAAG,MAAM;MACtB,MAAMK,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,GAAG,GAAG,EAAE,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC;MACrE,KAAK,IAAIU,CAAC,GAAG,IAAI,CAACZ,UAAU,GAAG,GAAG,EAAEY,CAAC,IAAIH,WAAW,EAAEG,CAAC,EAAE,EAAE;QACzD,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACZ,IAAI,CAACW,CAAC,CAAC,CAAC,EAAE;UACpD,OAAOA,CAAC,GAAG,CAAC;QACd;MACF;MACA,OAAOH,WAAW;IACpB,CAAC;IAnEC,IAAI,CAACR,IAAI,GAAG,EAAE;IACd,IAAI,CAACO,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACR,UAAU,GAAG,CAAC;IACnB,IAAI,CAACc,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB;IACA,IAAI,CAACrB,KAAK,GAAGA,KAAK;IAClB;IACA,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC;IACA,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;EAC1C;;EA0DA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEA,eAAeC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}